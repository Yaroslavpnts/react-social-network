{"version":3,"file":"static/js/674.7b14334f.chunk.js","mappings":"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","sources":["webpack://first-app-puntus/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://first-app-puntus/./src/components/Profile/MyPosts/PostItem/Post.module.css?f841","components/Profile/MyPosts/PostItem/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://first-app-puntus/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://first-app-puntus/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"createPost\":\"MyPosts_createPost__QkMEn\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__eXWWW\"};","import classes from './Post.module.css';\r\n\r\nconst Post = props => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPPW9da0an7QBRUAzS0Kg7QsF9JXJ9n7wVgw&usqp=CAU\"\r\n        alt=\"\"\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>likes </span>\r\n        {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from './MyPosts.module.css';\r\nimport Post from './PostItem/Post.jsx';\r\nimport React from // { PureComponent }\r\n'react';\r\nimport { Formik } from 'formik';\r\n\r\nconst MyPosts = React.memo(props => {\r\n  /*\r\n  React.memo - HOK для функциональных компонент\r\n  */\r\n  /*\r\n    Если наследоваться в классовой компоненте от PureComponent\r\n    То там автоматически делается проверка на ShouldComponentUpdate\r\n\r\n    Метод shouldComponentUpdate() базового класса React.PureComponent делает только поверхностное сравнение объектов. \r\n    Если они содержат сложные структуры данных, \r\n    это может привести к неправильной работе для более глубоких различий (то есть, различий, не выраженных на поверхности структуры). \r\n    Наследуйте класс PureComponent только тогда, когда вы ожидаете использовать простые пропсы и состояние\r\n  */\r\n\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   debugger;\r\n  //   return nextProps !== this.props || nextState !== this.state;\r\n  // }\r\n\r\n  const postsElements = props.posts.map(post => (\r\n    <Post key={post.message} message={post.message} likesCount={post.likesCount} />\r\n  ));\r\n\r\n  const newPostElement = React.createRef();\r\n  console.log('render');\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My posts</h3>\r\n      {/* <div className={classes.createPost}>\r\n        <div>\r\n          <textarea\r\n            ref={newPostElement}\r\n            value={props.profilePage.newPostText}\r\n            onChange={onPostChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={onAddPost}>Add post</button>\r\n        </div>\r\n      </div> */}\r\n      <Formik\r\n        initialValues={{\r\n          postText: '',\r\n        }}\r\n        onSubmit={(values, actions) => {\r\n          props.addPost(values);\r\n          actions.resetForm();\r\n        }}\r\n      >\r\n        {({ values, handleChange, handleSubmit, setValues }) => {\r\n          return (\r\n            <form>\r\n              <div className={classes.createPost}>\r\n                <div>\r\n                  <textarea\r\n                    name=\"postText\"\r\n                    ref={newPostElement}\r\n                    value={values.postText}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <button type=\"submit\" onClick={handleSubmit}>\r\n                    Add post\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n      <div className={classes.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {\r\n  // updateNewPostTextActionCreator,\r\n  addPostActionCreator,\r\n} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n// const MyPostsContainer1 = props => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {store => {\r\n//         let state = store.getState();\r\n\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator());\r\n//         };\r\n\r\n//         let onPostChange = text => {\r\n//           let action = updateNewPostTextActionCreator(text);\r\n//           store.dispatch(action);\r\n//         };\r\n\r\n//         return (\r\n//           <MyPosts\r\n//             updateNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             posts={state.profilePage.postsData}\r\n//             newPostText={state.profilePage.newPostText}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.profilePage.postsData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addPost: message => {\r\n      dispatch(addPostActionCreator(message));\r\n    },\r\n\r\n    // updateNewPostText: text => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //   dispatch(action);\r\n    // },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainImg\":\"ProfileInfo_mainImg__n+5zW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__vqh3S\",\"avatar\":\"ProfileInfo_avatar__CEgBB\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"ProfileStatus_profileStatus__Y4iOh\",\"editMode\":\"ProfileStatus_editMode__KY0qP\"};","import React, { useEffect, useState } from 'react';\r\nimport classes from './ProfileStatus.module.css';\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  // let [count, setCount] = useState(0);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(111111, count);\r\n  //   return () => console.log(222222, count);\r\n  // }, [count]);\r\n\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  /*\r\n    В useEffect передаем функции, который реакт должен выполнить после отрисовки компоненты\r\n    вторым аргументом передаем зависимость (синхронизацию), то, от чего зависит компонента, и если \r\n    эти данные изменились, то нужно вызвать функцию, переданную в useEffect\r\n\r\n    - Если вообще не передать вторым параметром ничего, то функция, переданная в useState будет вызываться при любом изменении\r\n    пропсов или стейта, если функция вызывает функцию, то та функция так же будет постоянно вызываться.\r\n\r\n    - Если передать пустой массив, то функция вызовится 1 раз (componentDidUpdate), и если функия возвращает функцию, то\r\n    та функция вызовится 1 раз, перед тем, как компонента будет \"умирать\" (componentWillUnmount)\r\n  */\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n\r\n    if (editMode) inputStatus.current.focus();\r\n  }, [props.status, editMode]);\r\n\r\n  const inputStatus = React.createRef();\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = e => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.profileStatus}>\r\n      {/* {!this.state.editMode && ( */}\r\n      <div>\r\n        <span className={editMode ? classes.editMode : ''} onDoubleClick={activateEditMode}>\r\n          {props.status || '------'}\r\n        </span>\r\n      </div>\r\n      {/* )} */}\r\n      {/* {this.state.editMode && ( */}\r\n      <div>\r\n        <input\r\n          // autoFocus\r\n          onChange={onStatusChange}\r\n          ref={inputStatus}\r\n          className={editMode ? classes.editMode : ''}\r\n          onBlur={deActivateEditMode}\r\n          value={status || ''}\r\n        />\r\n        {/* <button onClick={() => setCount(count + 1)}>123123213</button> */}\r\n      </div>\r\n      {/* )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import classes from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport Preloader from '../../common/preloader/Preloader';\r\n// import ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.mainImg}>\r\n        <img\r\n          src=\"https://thumbs.dreamstime.com/b/cosmos-beauty-deep-space-elements-image-furnished-nasa-science-fiction-art-102581846.jpg\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.descriptionBlock}>\r\n        <div className={classes.avatar}>\r\n          <img src={profile.photos.large ? profile.photos.large : userPhoto} alt=\"\" />\r\n        </div>\r\n        <div className={classes.aboutMe}>\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n          <h3>{profile.fullName}</h3>\r\n          <p>Birthday</p>\r\n          <p>Cty</p>\r\n          <p>Education</p>\r\n          <p>Website</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// import MyPosts from './MyPosts/MyPosts.jsx';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = props => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","// import MyPosts from './MyPosts/MyPosts.jsx';\r\nimport React from 'react';\r\nimport Profile from './Profile.jsx';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getUserStatus, updateUserStatus } from '../../redux/profile-reducer';\r\nimport { useLocation, useNavigate, useParams, Navigate } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\n\r\n/* Пока не учил хуки, сделаю функцию обертку, т.к. наша контейнерная компонента ProfileContainer - классовая компонента, то \r\n   мы не можем использовать хуки в классовых компонентах. Решение с офф документации - создать функцию обертку, которая по принципу\r\n   идентична к withRouter\r\n*/\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      // if (!userId) {\r\n      //   this.props.router.navigate('/login');  - непонятно как сделать редирект в классовой компоненте\r\n      // }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    // console.log('rerendered');\r\n\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateUserStatus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\nconst mapStateToProps = state => {\r\n  // console.log('mapStateToProps PROFILE');\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\n// export default connect(mapStateToProps, { getUserProfile })(withRouter(AuthRedirectComponent));\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = state => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId,\r\n  };\r\n};\r\n\r\nexport const withAuthRedirect = Component => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth && !this.props.authorizedUserId) return <Navigate to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n"],"names":["props","className","classes","src","alt","message","likesCount","React","postsElements","posts","map","post","newPostElement","console","log","initialValues","postText","onSubmit","values","actions","addPost","resetForm","handleChange","handleSubmit","setValues","name","ref","value","onChange","type","onClick","connect","state","profilePage","postsData","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","inputStatus","current","focus","onDoubleClick","e","target","onBlur","updateStatus","profile","photos","large","userPhoto","fullName","Preloader","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getUserStatus","updateUserStatus","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to"],"sourceRoot":""}