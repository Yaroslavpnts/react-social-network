{"version":3,"file":"static/js/876.07e1acdb.chunk.js","mappings":"oLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA4I,0BAA5I,EAAsL,+BAAtL,EAAkO,4BCAlO,GAAgB,OAAS,4B,mBCEnBA,EAAW,SAAC,GAAD,SAAGC,SAA2BC,EAAAA,OAAiB,EAA/C,EAcjB,EAZmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACtBC,EAAI,mBAAeD,GAEvB,OACE,gBAAKE,UAAS,UAAKJ,EAAAA,OAAL,KAAd,UACE,SAAC,KAAD,CAASI,UAAWN,EAAUO,GAAIF,EAAlC,SACGF,KAIR,ECdD,EAA0B,6BCK1B,EAJoB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACrB,OAAO,gBAAKF,UAAWJ,EAAhB,SAAkCM,GAC1C,E,oBCgED,EA7DgB,SAAAC,GACd,IAAIC,EAAkBD,EAAME,YAAYC,YAAYC,KAAI,SAAAC,GAAM,OAC5D,SAAC,EAAD,CAA4BX,KAAMW,EAAOX,KAAMC,GAAIU,EAAOV,IAAzCU,EAAOV,GADoC,IAI1DW,EAAmBN,EAAME,YAAYK,aAAaH,KAAI,SAAAL,GAAO,OAC/D,SAAC,EAAD,CAA8BJ,GAAII,EAAQJ,GAAII,QAASA,EAAQA,SAA7CA,EAAQJ,GADqC,IAkBjE,OAAKK,EAAMQ,QAGT,iBAAKX,UAAWJ,EAAhB,WACE,gBAAKI,UAAWJ,EAAhB,SAAuCQ,KACvC,iBAAKJ,UAAWJ,EAAhB,WACE,yBAAMa,KACN,SAAC,KAAD,CACEG,cAAe,CACbC,YAAa,IAEfC,SAAU,SAACC,EAAQC,GACjBb,EAAMc,YAAYF,GAClBC,EAAQE,WACT,EAPH,SASG,YAA6C,IAA1CH,EAAyC,EAAzCA,OAAQI,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACxB,OACE,iBAAKpB,UAAWJ,EAAhB,WACE,qBACEC,KAAK,cACLwB,SAAUF,EACVnB,UAAWJ,EAEX0B,MAAOP,EAAOF,eAEhB,mBAAQU,KAAK,SAASC,QAASJ,EAA/B,oBAKL,WA/BiB,SAAC,KAAD,CAAUnB,GAAG,UAoCxC,E,oBCFD,GAAewB,E,QAAAA,KAAQC,EAAAA,EAAAA,KA1BC,SAAAC,GACtB,MAAO,CACLtB,YAAasB,EAAMtB,YAEtB,IAE0B,SAAAuB,GACzB,MAAO,CACLX,YAAa,SAAAf,GACX0B,GAASC,EAAAA,EAAAA,IAAwB3B,GAClC,EAMJ,IAUoE4B,EAAAA,EAArE,CAAuFC,E,mJC5DjFC,EAA6B,SAAAL,GACjC,MAAO,CACLhB,OAAQgB,EAAMM,KAAKtB,OACnBuB,iBAAkBP,EAAMM,KAAKE,OAEhC,EAEYL,EAAmB,SAAAM,GAAc,IACtCC,EADqC,0IAEzC,WACE,OAAKC,KAAKnC,MAAMQ,QAAW2B,KAAKnC,MAAM+B,kBAE/B,SAACE,GAAD,UAAeE,KAAKnC,SAFoC,SAAC,KAAD,CAAUF,GAAG,UAG7E,KANwC,GACXsC,EAAAA,WAUhC,OAFqCb,EAAAA,EAAAA,IAAQM,EAARN,CAAoCW,EAG1E,C","sources":["webpack://first-app-puntus/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://first-app-puntus/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://first-app-puntus/./src/components/Dialogs/MessageItem/MessageItem.module.css?481d","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KR-x5\",\"dialogsItems\":\"Dialogs_dialogsItems__wWUTi\",\"dialog\":\"Dialogs_dialog__wE7XQ\",\"messages\":\"Dialogs_messages__ZWS9+\",\"createMessage\":\"Dialogs_createMessage__Bvjky\",\"newMessage\":\"Dialogs_newMessage__wPVMC\"};","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"DialogItem_active__TgT9B\"};","import classes from './DialogItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst setStyle = ({ isActive }) => (isActive ? classes.active : '');\r\n\r\nconst DialogItem = ({ name, id }) => {\r\n  let path = `/dialogs/${id}`;\r\n\r\n  return (\r\n    <div className={`${classes.dialog} `}>\r\n      <NavLink className={setStyle} to={path}>\r\n        {name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessageItem_message__5tBkX\"};","import classes from './MessageItem.module.css';\r\n\r\nconst MessageItem = ({ message }) => {\r\n  return <div className={classes.message}>{message}</div>;\r\n};\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\n\r\nconst Dialogs = props => {\r\n  let dialogsElements = props.dialogsPage.dialogsData.map(dialog => (\r\n    <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = props.dialogsPage.messagesData.map(message => (\r\n    <MessageItem key={message.id} id={message.id} message={message.message} />\r\n  ));\r\n\r\n  // let newMessageText = React.createRef();\r\n\r\n  // let onClickCreacteMessage = () => {\r\n  //   props.sendMessage();\r\n  // };\r\n\r\n  // let onNewMassageChange = e => {\r\n  //   let body = e.target.value;\r\n  //   // let action = updateNewMessageTextActionCreator(body);\r\n  //   // props.store.dispatch(action);\r\n\r\n  //   props.updateNewMessageBody(body);\r\n  // };\r\n\r\n  if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        <div>{messagesElements}</div>\r\n        <Formik\r\n          initialValues={{\r\n            messageText: '',\r\n          }}\r\n          onSubmit={(values, actions) => {\r\n            props.sendMessage(values);\r\n            actions.resetForm();\r\n          }}\r\n        >\r\n          {({ values, handleChange, handleSubmit }) => {\r\n            return (\r\n              <div className={classes.newMessage}>\r\n                <textarea\r\n                  name=\"messageText\"\r\n                  onChange={handleChange}\r\n                  className={classes.createMessage}\r\n                  // ref={newMessageText}\r\n                  value={values.messageText}\r\n                ></textarea>\r\n                <button type=\"submit\" onClick={handleSubmit}>\r\n                  Send\r\n                </button>\r\n              </div>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {\r\n  addMessageActionCreator,\r\n  // updateNewMessageTextActionCreator,\r\n} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n// import StoreContext from '../../StoreContex';\r\nimport { connect } from 'react-redux';\r\n// import { Navigate } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n// const DialogsContainer1 = props => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {store => {\r\n//         let state = store.getState();\r\n\r\n//         let onAddMessage = () => {\r\n//           store.dispatch(addMessageActionCreator());\r\n//         };\r\n\r\n//         let onNewMassageChange = body => {\r\n//           let action = updateNewMessageTextActionCreator(body);\r\n//           store.dispatch(action);\r\n//         };\r\n\r\n//         return (\r\n//           <Dialogs\r\n//             dialogsPage={state.dialogsPage}\r\n//             sendMessage={onAddMessage}\r\n//             updateNewMessageBody={onNewMassageChange}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nconst mapStateToDispatch = dispatch => {\r\n  return {\r\n    sendMessage: message => {\r\n      dispatch(addMessageActionCreator(message));\r\n    },\r\n    // updateNewMessageBody: body => {\r\n    //   let action = updateNewMessageTextActionCreator(body);\r\n    //   dispatch(action);\r\n    // },\r\n  };\r\n};\r\n\r\n// compose(connect(mapStateToProps, mapStateToDispatch), withAuthRedirect)(Dialogs);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapStateToDispatch)(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose(connect(mapStateToProps, mapStateToDispatch), withAuthRedirect)(Dialogs);\r\n","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = state => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId,\r\n  };\r\n};\r\n\r\nexport const withAuthRedirect = Component => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth && !this.props.authorizedUserId) return <Navigate to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n"],"names":["setStyle","isActive","classes","name","id","path","className","to","message","props","dialogsElements","dialogsPage","dialogsData","map","dialog","messagesElements","messagesData","isAuth","initialValues","messageText","onSubmit","values","actions","sendMessage","resetForm","handleChange","handleSubmit","onChange","value","type","onClick","compose","connect","state","dispatch","addMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","authorizedUserId","userId","Component","RedirectComponent","this","React"],"sourceRoot":""}